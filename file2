import pygame
import random

pygame.init()

#from src.Game import Game
#from src.Config import Config


class Apple:
    def __init__(self, display):
        self.x_pos = 0
        self.y_pos = 0

        self.display = display

        self.randomize()

    def randomize(self):
        height = Config['game']['height']
        width = Config['game']['width']
        bumper = Config['game']['bumper_size']

        max_x = (height - bumper - Config['snake']['width'])
        max_y = (height - bumper - Config['snake']['height']) 
        
        self.x_pos = random.randint(bumper, max_x)
        self.y_pos = random.randint(bumper, max_y)

    def draw(self):
        return pygame.draw.rect(
            self.display, 
            Config['colors']['red'],
            [
                self.x_pos,
                self.y_pos,
                Config['apple']['height'],
                Config['apple']['width']
            ]
        )

Config = {
    'game': {
        'caption': 'Anaconda',
        'height': 500,
        'width': 500,
        'fps': 45,
        'bumper_size': 30
    },
    'snake': {
        'height': 20,
        'width': 20,
        'speed': 10
    },
    'apple': {
        'width': 20,
        'height': 20
    },
    'colors': {
        'white': (255, 255, 255),
        'black': (0, 0, 0),
        'green': (0, 100, 0),
        'red': (100, 0, 0)
    }
}



class Game:
    def __init__(self, display):
        self.display = display
        self.score = 0

    def loop(self):
        clock = pygame.time.Clock()
        snake = Snake(self.display)
        apple = Apple(self.display)

        x_change = 0
        y_change = 0
        
        self.score = 0

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    exit()

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT:
                        x_change = -Config['snake']['speed']
                        y_change = 0
                    elif event.key == pygame.K_RIGHT:
                        x_change = Config['snake']['speed']
                        y_change = 0
                    elif event.key == pygame.K_UP:
                        x_change = 0
                        y_change = -Config['snake']['speed']
                    elif event.key == pygame.K_DOWN:
                        x_change = 0
                        y_change = Config['snake']['speed']
        
            # Fill background and draw game area
            self.display.fill(Config['colors']['green'])
            
            pygame.draw.rect(
                self.display, 
                Config['colors']['black'],
                [
                    Config['game']['bumper_size'],
                    Config['game']['bumper_size'],
                    Config['game']['height'] - Config['game']['bumper_size'] * 2,
                    Config['game']['width'] - Config['game']['bumper_size'] * 2
                ]
            )
            
            # Draw an apple
            apple_rect = apple.draw()

            # Move and Re-Draw Snake
            snake.move(x_change, y_change)
            snake_rect = snake.draw()
            snake.draw_body()

            # Detect collison with wall
            bumper_x = Config['game']['width'] - Config['game']['bumper_size']
            bumper_y = Config['game']['height'] - Config['game']['bumper_size']

            if (
                snake.x_pos < Config['game']['bumper_size'] or
                snake.y_pos < Config['game']['bumper_size'] or
                snake.x_pos + Config['snake']['width'] > bumper_x or
                snake.y_pos + Config['snake']['height'] > bumper_y
            ):
                self.loop()

            # Detect collision with apple
            if apple_rect.colliderect(snake_rect):
                apple.randomize()
                self.score += 1
                snake.eat()

            # Collide with Self
            if len(snake.body) >= 1:
                for cell in snake.body:
                    if snake.x_pos == cell[0] and snake.y_pos == cell[1]:
                        self.loop()

            # Initialize font and draw title and score text
            pygame.font.init()
            #font = pygame.font.Font('./assets/Now-Regular.otf', 28)
            
            font = pygame.font.SysFont("comicsansms", 28)
            
            score_text = 'Score: {}'.format(self.score)
            score = font.render(score_text, True, Config['colors']['white'])
            title = font.render('Anaconda', True, Config['colors']['white'])


            title_rect = title.get_rect(
                center=(
                    Config['game']['width'] / 2, 
                    Config['game']['bumper_size'] / 2
                )
            )

            score_rect = score.get_rect(
                center=(
                    500/2, 
                    Config['game']['height'] - Config['game']['bumper_size'] / 2
                )
            )

            self.display.blit(score, score_rect)
            self.display.blit(title, title_rect)

            pygame.display.update()
            clock.tick(Config['game']['fps'])




class Snake:
    def __init__(self, display):
        self.x_pos = (Config['game']['width'] -30) / 2
        self.y_pos = (Config['game']['height'] - 30) / 2
        self.display = display
        self.body = []
        self.max_size = 0

    def eat(self):
        self.max_size += 1

    def draw(self):
        return pygame.draw.rect(
            self.display, 
            Config['colors']['green'],
            [
                self.x_pos,
                self.y_pos,
                Config['snake']['height'],
                Config['snake']['width']
            ]
        )

    def draw_body(self):
        for item in self.body:
            pygame.draw.rect(
                self.display, 
                Config['colors']['green'],
                [
                    item[0],
                    item[1],
                    Config['snake']['width'],
                    Config['snake']['height']
                ]
            )

    def move(self, x_change, y_change):
        self.body.append((self.x_pos, self.y_pos))
        self.x_pos += x_change
        self.y_pos += y_change

        if len(self.body) > self.max_size:
            del(self.body[0])
   









def main():
    display = pygame.display.set_mode((
        Config['game']['width'], 
        Config['game']['height']
    ))
    pygame.display.set_caption(Config['game']['caption'])

    game = Game(display)
    game.loop()

if __name__ == '__main__':
    main()
